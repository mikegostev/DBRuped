options {
    STATIC = false; // Indicates whether the generated parser should be static or not
    DEBUG_PARSER = false;
    GRAMMAR_ENCODING = "UTF-8";
    LOOKAHEAD = 2;
}

// Define the parser grammar
PARSER_BEGIN(QueryTemplateParserImpl)
package me.gostev.sb.dbpq.qtemplate;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import me.gostev.sb.dbpq.qtemplate.TemplateElement.ElementType;

public class QueryTemplateParserImpl implements QueryTemplateParser {
    private StringBuilder tokenBuilder = new StringBuilder();

    private List<TemplateElement> elements = new ArrayList<>();
    private TemplateElement.Builder currentElement = null;

    private void append() {
      tokenBuilder.append(token.image);
    }

    String consumeToken() {
      String myToken = tokenBuilder.length() == 0 ? token.image : tokenBuilder.toString();
      tokenBuilder.setLength(0);
      return myToken;
    }

    private void print(String contextName) {
      System.out.printf("In context \"%s\" found expression: \"%s\"\n",contextName,consumeToken());
    }

    public List<TemplateElement> parse() {

		try {
		  templateExpression();
		} catch( Exception e) {
			e.printStackTrace();
		}

		return elements;
    }

    private void addWord() {
		if( currentElement == null ) {
		  elements.add(TemplateElement.buildWordElement(consumeToken()));
		} else {
		  currentElement.addWord(consumeToken());
		}
    }

    private void startPlaceholder() {
      currentElement = TemplateElement.builder();
    }

    private void finishPlaceholder() {
      elements.add(currentElement.build());
      currentElement = null;
    }

    private void setWildcardPlaceholder() {
		Objects.nonNull(currentElement);
		currentElement.setCaptureElement();
    }

    private void addReference() {
		Objects.nonNull(currentElement);
		currentElement.addReference(consumeToken());
    }

    private void setPlaceholderTarget() {
		Objects.nonNull(currentElement);
		currentElement.setElementType(ElementType.valueOf(consumeToken()));
    }
}

PARSER_END(QueryTemplateParserImpl)

SKIP: { "\\"|"\t"|" "|","}

TOKEN:
{
    // Define tokens

    <PROPERTY_KW: "PROPERTY">
    | <RESOURCE_KW: "RESOURCE">
    | <VALUE_KW: "VALUE">
    | <PLACEHOLDER_START: "${">
    | <PLACEHOLDER_END: "}">
    | <STAR : "*" >
    | <EQUALS : "=" >
    | <PIPE : "|" >
    | <HASH : "#">
    | <WORD : (["a"-"z","A"-"Z","0"-"9"])+ >
    | <REF : (["a"-"z","A"-"Z","0"-"9",":"])+ >
    | <DOT : ".">
    | <QMARK : "?">
}

void templateExpression() :
{}
{
   ( <WORD> { addWord(); } | placeholderExpression() )+ <EOF>
}

void placeholderExpression() :
{}
{
  <PLACEHOLDER_START> { startPlaceholder(); }
  ((<WORD> { addWord(); } )+ | <STAR> { setWildcardPlaceholder(); }) <HASH>
  (<PROPERTY_KW>|<RESOURCE_KW>|<VALUE_KW>) { setPlaceholderTarget(); }
  [<EQUALS> references()] <PLACEHOLDER_END> { finishPlaceholder(); }
}

void references() :
{}
{
  <REF> { addReference(); } (<PIPE> <REF> { addReference(); } )+
}
